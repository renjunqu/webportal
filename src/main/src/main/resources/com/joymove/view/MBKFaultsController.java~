package com.mobike.view;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import sun.misc.BASE64Decoder;

import com.mobike.entity.MBKFaults;
import com.mobike.service.MBKFaultsService;
import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;


@Controller
public class MBKFaultsController {
	
	private MBKFaultsService mbkfaultsService;
	
	private String contextPath = null;
	
	/**
	 * 
	 * @param req
	 * @return JSONObject
	 * @author LSH
	 * @methodRole 上报故障信息
	 * @createTime 2015-02-28  
	 */
	
	@RequestMapping(value="usermgr/theReportFault",method=RequestMethod.POST)
	public @ResponseBody JSONObject  reportFault(HttpServletRequest req){
		
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("result",1);
			try{
				Hashtable<String,Object> jsonObj = (Hashtable<String, Object>) req.getAttribute("jsonArgs");
				String faultImage  = (String) jsonObj.get("faultImage");
				String faultDesp = (String) jsonObj.get("faultDesp");
				String faultTime = (String) jsonObj.get("faultTime");
				SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH-mm-ss");  
				String str = dateFormat.format(new Date(Long.parseLong(faultTime)));  
				Date date = dateFormat.parse(str);  
				BASE64Decoder decode = new BASE64Decoder();
				byte[] byteImage = decode.decodeBuffer(faultImage);
				byte[] bt = null;
				MBKFaults  faults = new MBKFaults();
				if(faultImage.trim().equals("=0")){
					faults.setFaultImage(bt);
					faults.setFaultDesp(faultDesp);
					faults.setFaultTime(date);
					mbkfaultsService.insertMBKFaults(faults);
					jsonObject.put("result",0);
					
				}else{
					faults.setFaultImage(byteImage);
					faults.setFaultDesp(faultDesp);
					faults.setFaultTime(date);
					mbkfaultsService.insertMBKFaults(faults);
					jsonObject.put("result",0);
				}	
				
			}catch(Exception e){
				e.printStackTrace();
			}
		return jsonObject;
	}
	
	/**
	 * 
	 * @param req
	 * @return JSONObject
	 * @author LSH
	 * @methodRole 上报故障信息
	 * @createTime 2015-02-28  
	 */
	@RequestMapping(value="usermgr/getfaultInfo",method=RequestMethod.POST)
	public void getFault(HttpServletRequest req,HttpServletResponse res){
		
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("result",1);
			try{
				Hashtable<String,Object> jsonObj = (Hashtable<String, Object>) req.getAttribute("jsonArgs");
				String  id = (String) jsonObj.get("id");
				Map<String,Object> likeCondition = new HashMap<String, Object>();
				likeCondition.put("id",id);
				byte[] bt = null;
				List<MBKFaults> faults = mbkfaultsService.getMBKFaultsById(likeCondition);
				if (faults.size() > 0) {
					for (MBKFaults mbkFaults : faults) {
						InputStream inputStream = new ByteInputStream(mbkFaults.getFaultImage(), mbkFaults.getFaultImage().length);
						bt = FileCopyUtils.copyToByteArray(inputStream);
						res.setContentType("image/jpg");
						OutputStream os = res.getOutputStream();
						os.write(bt);
						os.flush();
						os.close();
						
						jsonObject.put("id",mbkFaults.getId());
						jsonObject.put("faultDesp",mbkFaults.getFaultDesp());
						jsonObject.put("faultTime", mbkFaults.getFaultTime());
						res.setContentType("application/json;charset=UTF-8");
						  try {
							  res.getWriter().write(jsonObject.toString());
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} 
					}
				}
			}catch(Exception e){
				e.printStackTrace();
			}
		
		
	}

	public MBKFaultsService getMbkfaultsService() {
		return mbkfaultsService;
	}

	public void setMbkfaultsService(MBKFaultsService mbkfaultsService) {
		this.mbkfaultsService = mbkfaultsService;
	}
	
	
	
	
}
